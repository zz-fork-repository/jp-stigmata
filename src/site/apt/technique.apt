 ----
 Technical Note
 ----
 Haruaki Tamada
 ----
 2007-05-11
 ----

What is Birthmark

*Definition of birthmark

 Let <p, q> be programs and <f(p)> be a set of characteristics
extracted from <p> by a certain method <f>. Then <f(p)> is called a
<<birthmark>> of <p> iff both of the following conditions are
satisfied.

 [[1]] <f(p)> is obtained from <p> itself without any extra information.

 [[2]] If <q> is a copy of <p>, then <f(p) = f(q)>

 []

 Condition 1 means that the birthmark is not extra information and is
required for <p> to run.  Hence, extracting a birthmark does not
require extra code as watermarking does.  Condition 2 states that the
same birthmark has to be obtained from copied programs.  By
contraposition, if birthmarks <f(p)> and <f(q)> are different, then we
can guarantee that <q> is not a copy of <p>.

 Hopefully, a birthmark will satisfy the following properties.

 [Property 1 (Preservation)] For <p'> obtained from $p$ by any program
transformation, <f(p) = f(p')> holds.

 [Property 2 (Distinction)] For <p> and <q> such that both programs have
same specification, if <p> and <q> are written
independently, then <f(p) != f(q)>.

 []

 These properties strengthen Condition 2 of birthmark definition.
Property 1 specifies the <<preservation property>> of the birthmark
against program transformation.  We believe that clever crackers may
try to modify birthmarks by transforming the original program into an
equivalent one to hide the fact of theft.  There are several automated
tools used to perform the transformation, involving program
<obfuscators> and <optimizers>. These tools can be used as a means of
attack against the birthmarks. Property 1 specifies that the same
birthmark must be obtained from <p> and converted to <p'>.  However,
there exist many ways to transform a program into an equivalent
one. Hence, in reality, it is difficult to extract strong enough
birthmarks to perfectly satisfy Property 1.

 Property 2 specifies the <<distinction property>> of the birthmark,
stating that: even though the specification of <p> and <q> is the
same, if implemented separately, different birthmarks should be
extracted.  In general, the detail of two independent programs is
almost never completely the same.  However, in the case that <p> and
<q> are both <<tiny>> programs, extracted birthmarks could become the
same, even if <p> and <q> are written independently.  Those properties
should be tuned within an allowable range at the user's discretion.

Implemented Birthmarks

*CVFV birthmark

 [Proposers] H. Tamada, et al.

 [Paper] Haruaki Tamada, Masahide Nakamura, Akito Monden, and Ken-ichi
 Matsumoto, "Java Birthmarks --Detecting the Software Theft--," IEICE
 Transactions on Information and Systems, Vol. E88-D, No. 9, September
 2005.

*SMC birthmark

 [Proposers] H. Tamada, et al.

 [Paper] Haruaki Tamada, Masahide Nakamura, Akito Monden, and Ken-ichi
 Matsumoto, "Java Birthmarks --Detecting the Software Theft--," IEICE
 Transactions on Information and Systems, Vol. E88-D, No. 9, September
 2005.

*IS birthmark

 [Proposers] H. Tamada, et al.

 [Paper] Haruaki Tamada, Masahide Nakamura, Akito Monden, and Ken-ichi
 Matsumoto, "Java Birthmarks --Detecting the Software Theft--," IEICE
 Transactions on Information and Systems, Vol. E88-D, No. 9, September
 2005.

*UC birthmark

 [Proposers] H. Tamada, et al.

 [Paper] Haruaki Tamada, Masahide Nakamura, Akito Monden, and Ken-ichi
 Matsumoto, "Java Birthmarks --Detecting the Software Theft--," IEICE
 Transactions on Information and Systems, Vol. E88-D, No. 9, September
 2005.

*k-gram based birthmark

 [Proposers] G. Myles and C. Collberg

 [Paper] Ginger Myles, Christian Collberg, ``K-gram based software
 birthmarks,'' In Proc. of the 2005 ACM symposium on Applied
 computing, 2005.


Related Publications

 * Haruaki Tamada, Yuichiro Kanzaki, Masahide Nakamura, Akito Monden,
   Ken-ichi Matsumoto, "A method for extracting program fingerprints
   from Java class files," The Institute of Electronics, Information
   and Communication Engineers Technical Report, Vol. ISEC2003-29,
   pp.127-133, July 2003. (in Japanese)

 * Haruaki Tamada, Masahide Nakamura, Akito Monden, and Ken-ichi
   Matsumoto, "Detecting the theft of programs using birthmarks,"
   Information Science Technical Report, NAIST-IS-TR2003014, ISSN
   0919-9527, Graduate School of Information Science, Nara Institute
   of Science and Technology, November 2003.

 * Haruaki Tamada, Masahide Nakamura, Akito Monden, and Ken-ichi
   Matsumoto, "Design and evaluation of birthmarks for detecting theft
   of Java programs," Proc. IASTED International Conference on
   Software Engineering
   ({{{http://www.iasted.org/conferences/2004/Innsbruck/se.htm}IASTED
   SE 2004}}), pp.569-575, Innsbruck,
   Austria, 17-19 February 2004.

 * Masateru Tsunoda, Takeshi Kakimoto, Naoki Ohsugi, Akito Monden, and
   Ken-ichi Matsumoto, "Javawock: A Java Class Recommender System
   Based on Collaborative Filtering," In Proc. of 17th International
   Conference on Software Engineering and Knowledge Engineering
   ({{{http://www.ksi.edu/seke/seke05.html}SEKE2005}}), pp.491-497,
   July 2005. (Taipei, Taiwan)

 * Haruaki Tamada, Masahide Nakamura, Akito Monden, and Ken-ichi
   Matsumoto, "Java Birthmarks --Detecting the Software Theft--,"
   IEICE Transactions on Information and Systems, Vol. E88-D, No. 9,
   September 2005.

 * Takesi Kakimoto, Akito Monden, Yasutaka Kamei, Haruaki Tamada,
   Masateru Tsunoda, and Ken-ichi Matsumoto, "Using Software
   Birthmarks to Identify Similar Classes and Major Functionalities,"
   In Proc. the 3rd International Workshop on Mining Software
   Repositories ({{{http://msr.uwaterloo.ca/msr2006/}MSR Mining
   Challenge 2006}}), pp.171--172, Shanghai, China, May
   2006.

